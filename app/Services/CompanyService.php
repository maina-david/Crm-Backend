<?php

namespace App\Services;

use App\Models\AccessProfile;
use App\Models\AccessRight;
use App\Models\Company;
use App\Models\CompanyAddress;
use App\Models\CompanyContact;
use App\Models\Country;
use App\Models\Group;
use App\Models\RoleProfile;
use App\Models\User;
use App\Models\UserAccessProfile;
use App\Models\UserGroup;
use Illuminate\Validation\ValidationException;

class CompanyService
{
    public function create_company($name, $user_id, $prefered_language, $logo)
    {
        $user = User::find($user_id);

        if ($user->company_id == NULL) {
            if ($user->is_owner == true) {
                $company_id = "";
                $is_duplicate = true;

                while ($is_duplicate) {
                    $company_id = rand(10000000, 99999999);
                    $duplicate = Company::where("system_id", $company_id)->first();
                    if (!$duplicate)
                        $is_duplicate = false;
                }

                $company = Company::create([
                    "name" => $name,
                    "system_id" => $company_id,
                    "prefered_language" => $prefered_language,
                    "logo" => $logo
                ]);
                $user->company_id = $company->id;
                $user->save();
                \App\Helpers\LogActivity::addToLog('Company ' . $name . ' created');

                $access_right_service = new AccessRightService();

                $role_profile_add = new RoleProfile();
                $role_profile_add->name = "Admin";
                $role_profile_add->description = 'Admin profile has all access on the system, it is generated by the system';
                $role_profile_add->company_id = $company->id;

                $role_profile = $access_right_service->add_role_profile($role_profile_add);
                $access_rights = AccessRight::all();
                foreach ($access_rights as $key => $access_right) {
                    $access_profile_add = new AccessProfile();
                    $access_profile_add->access_name = $access_right->access_name;
                    $access_profile_add->role_profile_id = $role_profile->id;
                    $access_profile_add->company_id =  $company->id;

                    $access_right_service->assign_access_to_role_profile($access_profile_add);
                }

                $user_access_profile = new UserAccessProfile();
                $user_access_profile->user_id = $user->id;
                $user_access_profile->access_profile_id = $role_profile->id;
                $user_access_profile->company_id =  $company->id;

                $access_right_service->assign_user_access_profile($user_access_profile);

                $group_add = new Group();
                $group_add->name = "Default service group";
                $group_add->description = "This group is generated by the system";
                $group_add->company_id = $company->id;
                $group_service = new GroupService();
                $added_group = $group_service->create_group($group_add);

                $added_user_group = $group_service->assign_group_user($user->id, $added_group->id, $company->id);

                return $company;
            } else {
                throw ValidationException::withMessages(["User doesn't have access"]);
            }
        } else {
            throw ValidationException::withMessages(["Company already created"]);
        }
    }

    public function edit_company($company)
    {
        $company_to_update = Company::find($company->user()->company_id);
        $company_to_update->name = $company->name;
        $company_to_update->prefered_language = $company->prefered_language;
        $company_to_update->logo = $company->logo;
        $company_to_update->save();

        \App\Helpers\LogActivity::addToLog('Company ' . $company->name . ' Updated');

        return $company_to_update;
    }

    public function add_company_address($address, $company_id = NULL)
    {
        if ($company_id == null)
            $company_id = $address->user()->company_id;

        $company_address_exist = CompanyAddress::where("company_id", $company_id)->first();
        if ($company_address_exist)
            throw ValidationException::withMessages(["Company address already created"]);

        $country = Country::where("iso", $address->country_code)->first();
        $helper_service = new HelperService();
        $phone = $helper_service->format_phone_number($address->phone, $country->phonecode);

        $company_address = CompanyAddress::create([
            "company_id" => $company_id,
            "country_code" => $address->country_code,
            "phone" => $phone,
            "email" => $address->email,
            "city" => $address->city,
            "office_number" => $address->office_number,
            "additional_information" => $address->additional_information
        ]);

        \App\Helpers\LogActivity::addToLog('Company address of ' . $address->email . ' created');
        return $company_address;
    }

    public function edit_company_address($address, $company_id = NULL)
    {
        if ($company_id == null)
            $company_id = $address->user()->company_id;

        $company_address_exist = CompanyAddress::where("company_id", $company_id)->first();
        if (!$company_address_exist)
            throw ValidationException::withMessages(["Company address not found"]);

        $country = Country::where("iso", $address->country_code)->first();
        $helper_service = new HelperService();
        $phone = $helper_service->format_phone_number($address->phone, $country->phonecode);

        $company_address = CompanyAddress::find($company_address_exist->id);
        // $company_address = CompanyAddress::create([
        //     "company_id" => $company_id,
        //     "country_code" => $address->country_code,
        //     "phone" => $phone,
        //     "email" => $address->email,
        //     "city" => $address->city,
        //     "office_number" => $address->office_number,
        //     "additional_information" => $address->additional_information
        // ]);
        $company_address->country_code = $address->country_code;
        $company_address->phone = $address->phone;
        $company_address->email = $address->email;
        $company_address->city = $address->city;
        $company_address->office_number = $address->office_number;
        $company_address->additional_information = $address->additional_information;
        $company_address->save();
        \App\Helpers\LogActivity::addToLog('Company address of ' . $address->email . ' updated');
        return $company_address;
    }

    public function add_company_contact($address, $company_id = NULL)
    {

        if ($company_id == null)
            $company_id = $address->user()->company_id;
        $helper_service = new HelperService();

        $company_address = CompanyAddress::where("company_id", $company_id)->first();
        $country = Country::where("iso", $company_address->country_code)->first();
        $phone = $helper_service->format_phone_number($address->phone_number, $country->phonecode);

        $company_contact = CompanyContact::create([
            "company_id" => $company_id,
            "company_contact_type_id" => $address->company_contact_type_id,
            "phone_number" => $phone,
            "email" => $address->email,
            "name" => $address->name
        ]);


        \App\Helpers\LogActivity::addToLog('Company contact for ' . $address->name . ' created');
        return $company_contact;
    }

    public function edit_company_contact($address, $company_id = NULL)
    {

        if ($company_id == null)
            $company_id = $address->user()->company_id;
        $helper_service = new HelperService();

        $company_address = CompanyAddress::where("company_id", $company_id)->first();
        $country = Country::where("iso", $company_address->country_code)->first();
        $phone = $helper_service->format_phone_number($address->phone_number, $country->phonecode);

        $company_contact = CompanyContact::find($address->contact_id);
        if ($company_contact->company_id == $company_id) {
            $company_contact->name = $address->name;
            $company_contact->phone_number = $address->phone_number;
            $company_contact->email = $address->email;
            $company_contact->company_contact_type_id = $address->company_contact_type_id;
            $company_contact->save();
            \App\Helpers\LogActivity::addToLog('Company contact for ' . $address->name . ' updated');
        } else
            abort("403", "unathorised");
        return $company_contact;
    }

    public function remove_company_contact($contact)
    {
        $company_id = $contact->user()->company_id;
        $company_contact = CompanyContact::find($contact->contact_id);
        if ($company_contact->company_id == $company_id) {
            \App\Helpers\LogActivity::addToLog('Company contact for ' . $company_contact->name . ' removed');
            $company_contact->delete();
        } else
            abort("403", "unathorised");

        return true;
    }
}
